/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package datas_lab6;

/**
 *
 * @author dylan
 */
import datas_lab6.Tree;

public class BST<E extends Baby> implements Tree<E> {

    protected TreeNode<E> root;
    protected int size = 0;
    protected java.util.Comparator<E> c;

    //add other functions here 
    // NONE OF THIS IS TESTED YET
    @Override
    public void heavy() {
        heavy(root);
    }

    public void heavy(TreeNode<E> root) {
        if (root == null) {
            return;
        }
        TreeNode<E> current = root;
        double maxRight = current.element.getWeight();
        double maxLeft = current.element.getWeight();

        if (current.element != null) {
            if ((current.right != null) && current.element.getWeight() > current.right.element.getWeight()) {
                maxRight = current.element.getWeight();

            }
            if (current.right != null) {
                heavy(current.right);
            }
            if ((current.left != null) && current.element.getWeight() > current.left.element.getWeight()) {
                maxLeft = current.element.getWeight();
            }
            if (current.left != null) {
                heavy(current.left);
            }
        }

        if (maxRight == maxLeft) {
            System.out.println(maxRight);
        } else if (maxRight > maxLeft) {
            System.out.println(maxRight);
        } else {
            System.out.println(maxLeft);
        }
    }

    public void least(TreeNode<E> root) {
        if (root == null) {
            return;
        }
        TreeNode<E> current = root;
        double minRight = current.element.getWeight();
        double minLeft = current.element.getWeight();

        if (current.element != null) {
            if (current.element.getWeight() < current.right.element.getWeight()) {
                minRight = current.element.getWeight();
            }
            least(current.right);
            if (current.element.getWeight() < current.left.element.getWeight()) {
                minLeft = current.element.getWeight();
            }
            least(current.left);
        }
        if (minRight == minLeft) {
            System.out.println(minRight);
        } else if (minRight < minLeft) {
            System.out.println(minRight);
        } else {
            System.out.println(minLeft);
        }
    }

    //This is still needed to be done but this just displays the babies in the descending order. 
    public void detailsDESC() {

    }

    //Counts the number of even numbers in the tree. 
    public int countEven(TreeNode<E> root) {
        if (root == null) {
            return 0;
        }
        return countEvenHelper(root, 0);

    }

    public int countEvenHelper(TreeNode<E> root, int count) {
        TreeNode<E> current = root;
        int evenCount = count;

        if (current.element != null) {
            if (current.right.element.getWeight() % 2 == 0) {
                evenCount++;
            }
            countEvenHelper(current.right, 0);
            if (current.left.element.getWeight() % 2 == 0) {
                evenCount++;
            }
            countEvenHelper(current.left, 0);
        }
        return evenCount;
    }

    //Counts the total number of nodes in teh tree. 
    public int totalNodes(TreeNode<E> root) {
        if (root == null) {
            return 0;
        }
        return totalNodesHelper(root, 1);
    }

    public int totalNodesHelper(TreeNode<E> root, int total) {
        TreeNode<E> current = root;
        int totalCount = total;
        if (current.element != null) {
            if (current.right.element != null) {
                totalCount++;
            }
            totalNodesHelper(current.right, totalCount);
            if (current.left.element != null) {
                totalCount++;
            }
            totalNodesHelper(current.left, totalCount);
        }

        return totalCount;
    }

    //This fucntion is to count every node in the tree that has two children. 
    public int twoChildren(TreeNode<E> root) {
        if (root == null) {
            return 0;
        }
        return countEvenHelper(root, 0);
    }

    public int twoChildrenHelper(TreeNode<E> root, int two) {
        TreeNode<E> current = root;
        int twoChild = two;

        if (current.element != null) {
            if (current.right != null && current.left != null) {
                twoChild++;
            }
            countEvenHelper(current.right, 0);
            countEvenHelper(current.left, 0);
        }
        return twoChild;
    }

    /**
     * Create a default BST with a natural order comparator
     */
    public BST() {
        this.c = (e1, e2) -> ((Comparable<E>) e1).compareTo(e2);
    }

    /**
     * Create a BST with a specified comparator
     */
    public BST(java.util.Comparator<E> c) {
        this.c = c;
    }

    /**
     * Create a binary tree from an array of objects
     */
    public BST(E[] objects) {
        this.c = (e1, e2) -> ((Comparable<E>) e1).compareTo(e2);
        for (int i = 0; i < objects.length; i++) {
            add(objects[i]);
        }
    }

    @Override
    /**
     * Returns true if the element is in the tree
     */
    public boolean search(E e) {
        TreeNode<E> current = root; // Start from the root

        while (current != null) {
            if (c.compare(e, current.element) < 0) {
                current = current.left;
            } else if (c.compare(e, current.element) > 0) {
                current = current.right;
            } else // element matches current.element
            {
                return true; // Element is found
            }
        }

        return false;
    }

    @Override
    /**
     * Insert element e into the binary tree Return true if the element is
     * inserted successfully
     */
    public boolean insert(E e) {
        if (root == null) {
            root = createNewNode(e); // Create a new root
        } else {
            // Locate the parent node
            TreeNode<E> parent = null;
            TreeNode<E> current = root;
            while (current != null) {
                if (c.compare(e, current.element) < 0) {
                    parent = current;
                    current = current.left;
                } else if (c.compare(e, current.element) > 0) {
                    parent = current;
                    current = current.right;
                } else {
                    return false; // Duplicate node not inserted
                }
            }
            // Create the new node and attach it to the parent node
            if (c.compare(e, parent.element) < 0) {
                parent.left = createNewNode(e);
            } else {
                parent.right = createNewNode(e);
            }
        }

        size++;
        return true; // Element inserted successfully
    }

    protected TreeNode<E> createNewNode(E e) {
        return new TreeNode<>(e);
    }

    @Override
    /**
     * Inorder traversal from the root
     */
    public void inorder() {
        inorder(root);
    }

    /**
     * Inorder traversal from a subtree
     */
    protected void inorder(TreeNode<E> root) {
        if (root == null) {
            return;
        }
        inorder(root.left);
        System.out.print(root.element + " ");
        inorder(root.right);
    }

    @Override
    /**
     * Postorder traversal from the root
     */
    public void postorder() {
        postorder(root);
    }

    /**
     * Postorder traversal from a subtree
     */
    protected void postorder(TreeNode<E> root) {
        if (root == null) {
            return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.element + " ");
    }

    @Override
    /**
     * Preorder traversal from the root
     */
    public void preorder() {
        preorder(root);
    }

    /**
     * Preorder traversal from a subtree
     */
    protected void preorder(TreeNode<E> root) {
        if (root == null) {
            return;
        }
        System.out.print(root.element + " ");
        preorder(root.left);
        preorder(root.right);
    }

    /**
     * This inner class is static, because it does not access any instance
     * members defined in its outer class
     */
    public static class TreeNode<E> {

        protected E element;
        protected TreeNode<E> left;
        protected TreeNode<E> right;

        public TreeNode(E e) {
            element = e;
        }
    }

    @Override
    /**
     * Get the number of nodes in the tree
     */
    public int getSize() {
        return size;
    }

    /**
     * Returns the root of the tree
     */
    public TreeNode<E> getRoot() {
        return root;
    }

    /**
     * Returns a path from the root leading to the specified element
     */
    public java.util.ArrayList<TreeNode<E>> path(E e) {
        java.util.ArrayList<TreeNode<E>> list
                = new java.util.ArrayList<>();
        TreeNode<E> current = root; // Start from the root

        while (current != null) {
            list.add(current); // Add the node to the list
            if (c.compare(e, current.element) < 0) {
                current = current.left;
            } else if (c.compare(e, current.element) > 0) {
                current = current.right;
            } else {
                break;
            }
        }

        return list; // Return an array list of nodes
    }

    @Override
    /**
     * Delete an element from the binary tree. Return true if the element is
     * deleted successfully Return false if the element is not in the tree
     */
    public boolean delete(E e) {
        // Locate the node to be deleted and also locate its parent node
        TreeNode<E> parent = null;
        TreeNode<E> current = root;
        while (current != null) {
            if (c.compare(e, current.element) < 0) {
                parent = current;
                current = current.left;
            } else if (c.compare(e, current.element) > 0) {
                parent = current;
                current = current.right;
            } else {
                break; // Element is in the tree pointed at by current
            }
        }

        if (current == null) {
            return false; // Element is not in the tree
        }
        // Case 1: current has no left child
        if (current.left == null) {
            // Connect the parent with the right child of the current node
            if (parent == null) {
                root = current.right;
            } else {
                if (c.compare(e, parent.element) < 0) {
                    parent.left = current.right;
                } else {
                    parent.right = current.right;
                }
            }
        } else {
            // Case 2: The current node has a left child
            // Locate the rightmost node in the left subtree of
            // the current node and also its parent
            TreeNode<E> parentOfRightMost = current;
            TreeNode<E> rightMost = current.left;

            while (rightMost.right != null) {
                parentOfRightMost = rightMost;
                rightMost = rightMost.right; // Keep going to the right
            }

            // Replace the element in current by the element in rightMost
            current.element = rightMost.element;

            // Eliminate rightmost node
            if (parentOfRightMost.right == rightMost) {
                parentOfRightMost.right = rightMost.left;
            } else // Special case: parentOfRightMost == current
            {
                parentOfRightMost.left = rightMost.left;
            }
        }

        size--; // Reduce the size of the tree
        return true; // Element deleted successfully
    }

    @Override
    /**
     * Obtain an iterator. Use inorder.
     */
    public java.util.Iterator<E> iterator() {
        return new InorderIterator();
    }

    // Inner class InorderIterator
    private class InorderIterator implements java.util.Iterator<E> {
        // Store the elements in a list

        private java.util.ArrayList<E> list
                = new java.util.ArrayList<>();
        private int current = 0; // Point to the current element in list

        public InorderIterator() {
            inorder(); // Traverse binary tree and store elements in list
        }

        /**
         * Inorder traversal from the root
         */
        private void inorder() {
            inorder(root);
        }

        /**
         * Inorder traversal from a subtree
         */
        private void inorder(TreeNode<E> root) {
            if (root == null) {
                return;
            }
            inorder(root.left);
            list.add(root.element);
            inorder(root.right);
        }

        @Override
        /**
         * More elements for traversing?
         */
        public boolean hasNext() {
            if (current < list.size()) {
                return true;
            }

            return false;
        }

        @Override
        /**
         * Get the current element and move to the next
         */
        public E next() {
            return list.get(current++);
        }

        @Override // Remove the element returned by the last next()
        public void remove() {
            if (current == 0) // next() has not been called yet
            {
                throw new IllegalStateException();
            }

            delete(list.get(--current));
            list.clear(); // Clear the list
            inorder(); // Rebuild the list
        }
    }

    @Override
    /**
     * Remove all elements from the tree
     */
    public void clear() {
        root = null;
        size = 0;
    }
}
